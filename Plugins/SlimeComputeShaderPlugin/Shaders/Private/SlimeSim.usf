#pragma once

#include "/Engine/Public/Platform.ush"
#include "SlimeStructs.ush"

StructuredBuffer<SpeciesSettings> SpeciesSettingsBuffer;
int NumSpecies;

float4 TrailWeight;

RWStructuredBuffer<SlimeAgent> Agents;
uint NumAgents;

RWTexture2D<float4> TrailMap;
float2 TextureSize;

//used as enum: 0=Screen/Texture as bounds, 1=Circle as bounds
uint MapBounds;
float CircleRadius;
float2 CircleCenter;

float DeltaTime;
float Time;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint Hash(uint State)
{
    State ^= 2747636419u;
    State *= 2654435769u;
    State ^= State >> 16;
    State *= 2654435769u;
    State ^= State >> 16;
    State *= 2654435769u;
    return State;
}

float ScaleToRange01(uint State)
{
    return State / 4294967295.0;
}

bool OnScreen(float2 Point)
{
    return !(Point.x < 0 || Point.x >= TextureSize.x || Point.y < 0 || Point.y >= TextureSize.y);
}

bool InCircle(float2 Point)
{
    float dx = abs(Point.x - CircleCenter.x);
    if (dx > CircleRadius)
    {
        return false;
    }
    float dy = abs(Point.y - CircleCenter.y);
    if (dy > CircleRadius)
    {
        return false;
    }
    if (dx + dy <= CircleRadius)
    {
        return true;
    }
    return dx * dx + dy * dy <= CircleRadius * CircleRadius;
}

bool InBounds(float2 Point)
{
    switch (MapBounds)
    {
        case 0:
            return OnScreen(Point);
        case 1:
            return InCircle(Point);
        default:
            return false;
    }
}

void KeepInBounds(inout float2 Point)
{
    switch (MapBounds)
    {
        case 0:
            Point.x = min(TextureSize.x - 1, max(0, Point.x));
            Point.y = min(TextureSize.y - 1, max(0, Point.y));
            break;
        case 1:
            float2 toPoint = Point - CircleCenter;
            toPoint = normalize(toPoint);
            Point = CircleCenter + toPoint * CircleRadius;
			break;
    }
}

float Sense(SlimeAgent Agent, SpeciesSettings Settings, float SensorAngleOffset)
{
    float sensorAngle = Agent.Angle + SensorAngleOffset;
    float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

    float2 sensorPos = Agent.Position + sensorDir * Settings.SensorOffsetDst;
    int sensorCentreX = (int) sensorPos.x;
    int sensorCentreY = (int) sensorPos.y;

    float sum = 0;

    int4 senseWeight = Agent.SpeciesMask * 2 - 1;

    for (int offsetX = -Settings.SensorSize; offsetX <= Settings.SensorSize; offsetX++)
    {
        for (int offsetY = -Settings.SensorSize; offsetY <= Settings.SensorSize; offsetY++)
        {
            int sampleX = min(TextureSize.x - 1, max(0, sensorCentreX + offsetX));
            int sampleY = min(TextureSize.y - 1, max(0, sensorCentreY + offsetY));
            sum += dot(senseWeight, TrailMap[int2(sampleX, sampleY)]);
        }
    }

    return sum;
}

[numthreads(64, 1, 1)]
void Update(uint3 ThreadID : SV_DispatchThreadID)
{
    if (ThreadID.x >= NumAgents)
    {
        return;
    }


    SlimeAgent agent = Agents[ThreadID.x];
    if (agent.SpeciesIndex >= NumSpecies)
    {
        return;
    }
	
    SpeciesSettings settings = SpeciesSettingsBuffer[agent.SpeciesIndex];
    float2 pos = agent.Position;

    uint random = Hash(pos.y * TextureSize.x + pos.x + Hash(ThreadID.x + Time * 100000));

	// Steer based on sensory data
    float sensorAngleRad = settings.SensorAngleDegrees * (3.1415 / 180);
    float weightForward = Sense(agent, settings, 0);
    float weightLeft = Sense(agent, settings, sensorAngleRad);
    float weightRight = Sense(agent, settings, -sensorAngleRad);

	
    float randomSteerStrength = ScaleToRange01(random);
    float turnSpeed = settings.TurnSpeed * 2 * 3.1415;

	// Continue in same direction
    if (weightForward > weightLeft && weightForward > weightRight)
    {
        Agents[ThreadID.x].Angle += 0;
    }
    else if (weightForward < weightLeft && weightForward < weightRight)
    {
        Agents[ThreadID.x].Angle += (randomSteerStrength - 0.5) * 2 * turnSpeed * DeltaTime;
    }
	// Turn right
    else if (weightRight > weightLeft)
    {
        Agents[ThreadID.x].Angle -= randomSteerStrength * turnSpeed * DeltaTime;
    }
	// Turn left
    else if (weightLeft > weightRight)
    {
        Agents[ThreadID.x].Angle += randomSteerStrength * turnSpeed * DeltaTime;
    }


	// Update position
    float2 direction = float2(cos(agent.Angle), sin(agent.Angle));
    float2 newPos = agent.Position + direction * DeltaTime * settings.MoveSpeed;

	
	// Clamp position to map boundaries, and pick new random move dir if hit boundary
    if (InBounds(newPos))
    {
	    if (MapBounds != 1 || OnScreen(newPos))
	    {
            int2 coord = int2(newPos);
            float4 oldTrail = TrailMap[coord];
            TrailMap[coord] = min(1, oldTrail + agent.SpeciesMask * TrailWeight * DeltaTime);
            //TrailMap[coord] = oldTrail + agent.SpeciesMask * TrailWeight * DeltaTime;
        }
    }
    else
    {
        random = Hash(random);
        float randomAngle = ScaleToRange01(random) * 2 * 3.1415;

        KeepInBounds(newPos);
        Agents[ThreadID.x].Angle = randomAngle;
    }
	
    Agents[ThreadID.x].Position = newPos;
}
